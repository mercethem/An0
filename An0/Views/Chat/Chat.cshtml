@{
    ViewData["Title"] = "Secure Chat";
}

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-md-8">
            <div class="video-container">
                <video id="remoteVideo" autoplay playsinline></video>
                <div id="localVideoContainer" style="display: none;">
                    <video id="localVideo" autoplay muted playsinline></video>
                    <canvas id="localProcessedCanvas" style="width: 100%; height: 100%; position: absolute; top: 0; left: 0;"></canvas>
                </div>
                <canvas id="processedVideoCanvas" style="display: none;"></canvas>
                <!-- Görüşme kontrol butonları - Kırmızı okla işaret edilen yerde -->
                <div class="position-absolute" style="top: 10px; right: 10px; z-index: 9999; display: flex; gap: 10px;">
                    <!-- Görüşmeden kendisi ayrılma butonu (Gri) -->
                    <button id="leaveCallButton" class="btn btn-secondary rounded" 
                        style="width: 40px; height: 40px; display: none; cursor: pointer; padding: 5px;"
                        title="Görüşmeden Ayrıl (Sadece siz çıkarsınız)" 
                        onclick="chatApp.leaveCall(); this.style.display='none';">
                        <i class="bi bi-box-arrow-left" style="font-size: 20px;"></i>
                    </button>
                    <!-- Görüşmeyi sonlandırma butonu (Kırmızı) -->
                    <button id="quickEndCallButton" class="btn btn-danger rounded" 
                        style="width: 40px; height: 40px; display: none; cursor: pointer; padding: 5px;"
                        title="Görüşmeyi Sonlandır" 
                        onclick="chatApp.endCall(); this.style.display='none';">
                        <i class="bi bi-telephone-x-fill" style="font-size: 20px;"></i>
                    </button>
                </div>
            </div>
            
            <!-- Görüntü İşleme Kontrolleri -->
            <div class="image-processing-controls mt-3">
                <div class="card">
                    <div class="card-header">
                        Görüntü İşleme Ayarları
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-check mb-2">
                                    <input type="checkbox" class="form-check-input" id="useLocalProcessing" checked>
                                    <label class="form-check-label" for="useLocalProcessing">Yerel İşleme Kullan</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Secure Chat</h5>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-warning me-2" id="connectionStatus">Bağlanıyor...</span>
                        <span class="small" id="roomInfo"></span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Normal Chat View (default) -->
                    <div id="normalChatView">
                        <div class="row">
                            <div class="col-md-12">
                                <div id="messagesList" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;"></div>
                                <div class="input-group">
                                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." />
                                    <button class="btn btn-primary" type="button" id="sendButton">Send</button>
                                    <button class="btn btn-success" type="button" id="videoCallButton">
                                        <i class="bi bi-camera-video-fill"></i>
                                    </button>
                                    <input type="file" id="fileInput" style="display: none;" />
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Video Chat View (hidden by default) -->
                    <div id="videoChatView" class="d-none">
                        <div class="row">
                            <div class="col-md-6">
                                <!-- Mesaj listesi ve gönderme alanı -->
                                <div id="messagesListVideo" class="border rounded p-3 mb-3" style="height: 300px; overflow-y: auto;"></div>
                                <div class="input-group mb-3">
                                    <input type="text" id="messageInputVideo" class="form-control" placeholder="Type your message here..." />
                                    <button class="btn btn-primary" type="button" id="sendButtonVideo">Send</button>
                                    <input type="file" id="fileInputVideo" style="display: none;" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <!-- Video görüşme alanı -->
                                <div class="position-relative mb-3">
                                    <video id="remoteVideoInline" class="w-100 rounded" autoplay playsinline style="height: 300px; background-color: #000;"></video>
                                    <video id="localVideoInline" class="position-absolute bottom-0 end-0 rounded" autoplay playsinline muted style="width: 25%; height: auto; border: 2px solid white; margin: 10px; z-index: 100; background-color: #222; display: block;"></video>
                                </div>
                                <div class="d-flex justify-content-center">
                                    <button id="endCallButtonInline" class="btn btn-danger rounded-circle">
                                        <i class="bi bi-telephone-x-fill"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Video Call Container for fullscreen mode -->
                    <div id="videoCallContainer" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 800px; height: 600px; background: rgba(0,0,0,0.9); z-index: 1000; border-radius: 12px; overflow: hidden; box-shadow: 0 0 20px rgba(0,0,0,0.5);">
                        <div class="position-relative h-100">
                            <video id="remoteVideoFullscreen" class="position-absolute" autoplay playsinline style="width: 100%; height: 100%; object-fit: cover;"></video>
                            <video id="localVideoFullscreen" class="position-absolute bottom-0 end-0" autoplay playsinline muted style="width: 20%; max-width: 160px; height: auto; border: 2px solid white; margin: 16px; border-radius: 8px; z-index: 10;"></video>
                            
                            <div class="position-absolute bottom-0 start-50 translate-middle-x mb-4">
                                <div class="d-flex gap-3">
                                    <button id="toggleMicButton" class="btn btn-light rounded-circle p-3">
                                        <i class="bi bi-mic-fill"></i>
                                    </button>
                                    <button id="toggleVideoButton" class="btn btn-light rounded-circle p-3">
                                        <i class="bi bi-camera-video-fill"></i>
                                    </button>
                                    <button id="endCallButton" class="btn btn-danger rounded-circle p-3">
                                        <i class="bi bi-telephone-x-fill"></i>
                                    </button>
                                </div>
                                <div id="callStatus" class="text-center text-white mt-2">Aranıyor...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Video Call Modal -->
<div class="modal fade" id="videoCallModal" tabindex="-1" aria-labelledby="videoCallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="videoCallModalLabel">Video Call</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeVideoModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="position-relative">
                            <video id="remoteVideo" class="w-100 rounded" autoplay playsinline style="height: 400px; background-color: #000;"></video>
                            <video id="localVideo" class="position-absolute bottom-0 end-0 rounded" autoplay playsinline muted style="width: 25%; height: auto; border: 2px solid white; margin: 10px; z-index: 100; background-color: #222; display: block;"></video>
                            <div id="callStatus" class="position-absolute top-50 start-50 translate-middle bg-dark bg-opacity-75 text-white p-3 rounded d-none">
                                Connecting...
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <video id="localVideo" class="w-100 rounded mb-3" autoplay playsinline muted style="height: 150px; background-color: #222;"></video>
                        <div class="d-flex justify-content-center">
                            <button id="endCallButton" class="btn btn-danger rounded-circle">
                                <i class="bi bi-telephone-x-fill"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Incoming Call Modal -->
<div class="modal fade" id="incomingCallModal" tabindex="-1" aria-labelledby="incomingCallModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="incomingCallModalLabel">Incoming Video Call</h5>
            </div>
            <div class="modal-body text-center">
                <p>You have an incoming video call</p>
                <div class="d-flex justify-content-center gap-3">
                    <button id="acceptCallButton" class="btn btn-success rounded-circle">
                        <i class="bi bi-telephone-fill"></i>
                    </button>
                    <button id="rejectCallButton" class="btn btn-danger rounded-circle">
                        <i class="bi bi-telephone-x-fill"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- API Connection Error Popup -->
<div id="apiErrorPopup" class="api-error-popup">
    <div class="api-error-content">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        API'ye bağlantı kurulamadı. Yerel işleme kullanılıyor.
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <script src="~/js/chat.js"></script>

    <script>
        // Initialize chat values from the view
        document.addEventListener('DOMContentLoaded', function() {
            // Show connecting status
            document.getElementById("connectionStatus").textContent = "Bağlanıyor...";
            document.getElementById("connectionStatus").className = "badge bg-warning me-2";
            
            // Log connection info to help debugging
            console.log("Connection parameters:", {
                connectionId: "@ViewBag.ConnectionId",
                joinWithInviteCode: @(ViewBag.JoinWithInviteCode ? "true" : "false"),
                inviteCode: "@ViewBag.InviteCode",
                roomCode: "@ViewBag.RoomCode"
            });
            
            // Initialize chat values
            chatApp.initChatValues({
                sharedPassword: "@ViewBag.SharedPassword",
                connectionId: "@ViewBag.ConnectionId",
                joinWithInviteCode: @(ViewBag.JoinWithInviteCode ? "true" : "false"),
                inviteCode: "@ViewBag.InviteCode",
                roomCode: "@ViewBag.RoomCode"
            });
            
            // Initialize WebSocket connection
            chatApp.initializeWebSocket().then(wsConnected => {
                console.log("WebSocket connection initialized:", wsConnected);
                
                // Initialize SignalR connection with retry mechanism
                initializeSignalRWithRetry();
            });
            
            // Function to initialize SignalR with retry mechanism
            function initializeSignalRWithRetry(retryCount = 0) {
                const maxRetries = 3;
                
                chatApp.initSignalRConnection().then(signalRConnected => {
                    console.log("SignalR connection initialized:", signalRConnected);
                    
                    if (signalRConnected) {
                        // Set up UI event handlers
                        setupUIEventHandlers();
                    } else if (retryCount < maxRetries) {
                        // Retry connection after a delay
                        const delayMs = Math.pow(2, retryCount) * 1000; // Exponential backoff
                        console.log(`Retrying SignalR connection in ${delayMs}ms (attempt ${retryCount + 1}/${maxRetries})...`);
                        
                        document.getElementById("connectionStatus").textContent = `Yeniden bağlanıyor (${retryCount + 1}/${maxRetries})...`;
                        
                setTimeout(() => {
                            initializeSignalRWithRetry(retryCount + 1);
                        }, delayMs);
            } else {
                        // Max retries reached, show detailed error
                        console.error("Failed to connect after maximum retries");
                        document.getElementById("connectionStatus").textContent = "Bağlantı başarısız. Sayfayı yenileyin.";
                        document.getElementById("connectionStatus").className = "badge bg-danger me-2";
                        
                        // Show detailed error message to the user
                        appendSystemMessage("Bağlantı kurulamadı. Lütfen şu adımları deneyin:\n" +
                                           "1. İnternet bağlantınızı kontrol edin\n" +
                                           "2. Tarayıcı sayfasını yenileyin\n" +
                                           "3. Farklı bir tarayıcı deneyin\n" +
                                           "4. Oturum bilgilerinizin doğru olduğundan emin olun");
                    }
                });
            }
        });
        
        // Set up UI event handlers
        function setupUIEventHandlers() {
            // Send message button
            document.getElementById('sendButton').addEventListener('click', function() {
                const messageInput = document.getElementById('messageInput');
                const message = messageInput.value.trim();
                
                if (message) {
                    chatApp.sendMessage(message).then(success => {
                        if (success) {
                            messageInput.value = '';
                            messageInput.focus();
                        } else {
                            // Message sending failed, show an error
                            appendSystemMessage("Mesaj gönderilemedi. Bağlantınızı kontrol edin.");
                        }
                    }).catch(error => {
                        console.error("Error sending message:", error);
                        appendSystemMessage("Mesaj gönderilirken hata oluştu.");
                    });
                }
            });
            
            // Message input enter key
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    document.getElementById('sendButton').click();
                }
            });
            
            // Message input Ctrl+click for file upload
            document.getElementById('messageInput').addEventListener('click', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    // Ctrl+click (or Command+click on Mac) to upload file
                    document.getElementById('fileInput').click();
                    e.preventDefault();
                }
            });
            
            // Message input right-click context menu option
            document.getElementById('messageInput').addEventListener('contextmenu', function(e) {
                e.preventDefault();
                
                // Create a simple context menu
                const menu = document.createElement('div');
                menu.style.position = 'fixed';
                menu.style.left = e.clientX + 'px';
                menu.style.top = e.clientY + 'px';
                menu.style.backgroundColor = 'white';
                menu.style.border = '1px solid #ccc';
                menu.style.borderRadius = '4px';
                menu.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
                menu.style.padding = '5px 0';
                menu.style.zIndex = '1000';
                
                // Add upload option
                const uploadOption = document.createElement('div');
                uploadOption.textContent = 'Dosya Gönder';
                uploadOption.style.padding = '8px 16px';
                uploadOption.style.cursor = 'pointer';
                uploadOption.style.hover = 'background-color: #f5f5f5';
                
                uploadOption.addEventListener('click', function() {
                    document.getElementById('fileInput').click();
                    document.body.removeChild(menu);
                });
                
                menu.appendChild(uploadOption);
                document.body.appendChild(menu);
                
                // Remove menu when clicking elsewhere
                setTimeout(() => {
                    const closeMenu = function() {
                        if (document.body.contains(menu)) {
                            document.body.removeChild(menu);
                            document.removeEventListener('click', closeMenu);
                        }
                    };
                    document.addEventListener('click', closeMenu);
                }, 0);
            });
            
            // Video call button
            document.getElementById('videoCallButton').addEventListener('click', function() {
                chatApp.startVideoCall();
            });
            
            // End call button
            document.getElementById('endCallButton').addEventListener('click', function() {
                chatApp.endVideoCall();
            });
            
            // Toggle mic button
            document.getElementById('toggleMicButton').addEventListener('click', function() {
                if (chatApp.localStream) {
                    const audioTrack = chatApp.localStream.getAudioTracks()[0];
                    if (audioTrack) {
                        // Mikrofon durumunu değiştir
                        audioTrack.enabled = !audioTrack.enabled;
                        
                        // Mikrofon durumuna göre ikonu güncelle
                        this.querySelector('i').className = audioTrack.enabled ? 
                            'bi bi-mic-fill' : 'bi bi-mic-mute-fill';
                            
                        // Log ve bildirim ekle
                        console.log("Mikrofon durumu: " + (audioTrack.enabled ? "Açık" : "Kapalı"));
                        
                        if (!audioTrack.enabled) {
                            // Mikrofon kapatıldığında uyarı göster
                            appendSystemMessage("Mikrofonunuz kapatıldı. Konuşmak için tekrar açın.", false);
                        } else {
                            // Mikrofon açıldığında bildir
                            appendSystemMessage("Mikrofonunuz açıldı.", false);
                        }
                        
                        // Mikrofon durumunu WebRTC üzerinden yeniden ayarlamayı dene
                        try {
                            const senders = chatApp.peerConnection.getSenders();
                            const audioSender = senders.find(sender => 
                                sender.track && sender.track.kind === 'audio');
                                
                            if (audioSender && audioSender.track) {
                                audioSender.track.enabled = audioTrack.enabled;
                                console.log("WebRTC audio sender track durumu ayarlandı:", audioSender.track.enabled);
                            }
                        } catch (e) {
                            console.warn("WebRTC sender durumu güncellenemedi:", e);
                        }
                    } else {
                        console.error("Ses kanalı bulunamadı!");
                        appendSystemMessage("Mikrofon bulunamadı. Tarayıcı izinlerini kontrol edin.", true);
                    }
                } else {
                    console.error("Medya akışı bulunamadı!");
                    appendSystemMessage("Görüntülü görüşme başlatılmadı.", true);
                }
            });
            
            // Toggle video button
            document.getElementById('toggleVideoButton').addEventListener('click', function() {
                if (chatApp.localStream) {
                    const videoTrack = chatApp.localStream.getVideoTracks()[0];
                    if (videoTrack) {
                        videoTrack.enabled = !videoTrack.enabled;
                        this.querySelector('i').className = videoTrack.enabled ? 
                            'bi bi-camera-video-fill' : 'bi bi-camera-video-off-fill';
                    }
                }
            });
            
            // File input change
            document.getElementById('fileInput').addEventListener('change', function(e) {
                if (e.target.files.length > 0) {
                    const file = e.target.files[0];
                    // Send the file
                    chatApp.sendFile(file).then(success => {
                        if (success) {
                            console.log("File sent successfully");
                        } else {
                            console.error("Failed to send file");
                        }
                    }).catch(error => {
                        console.error("Error sending file:", error);
                    });
                }
            });
            
            // Local processing checkbox
            document.getElementById('useLocalProcessing').addEventListener('change', function(e) {
                const useLocalProcessing = e.target.checked;
                
                if (useLocalProcessing) {
                    // Switch to local processing
                    console.log("Switching to local processing");
                } else {
                    // Switch to server processing
                    console.log("Switching to server processing");
                    chatApp.initializeWebSocket();
                }
            });
        }
    </script>
}

<style>
    .image-processing-controls {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .form-check {
        margin-bottom: 10px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .video-container {
        position: relative;
        width: 100%;
        height: 0;
        padding-bottom: 56.25%; /* 16:9 aspect ratio */
        background-color: #000;
        border-radius: 8px;
        overflow: hidden;
    }

    #remoteVideo {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    #localVideoContainer {
        position: absolute;
        bottom: 16px;
        right: 16px;
        width: 180px;
        height: 120px;
        border: 2px solid white;
        border-radius: 8px;
        overflow: hidden;
        z-index: 20;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    #localVideo {
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 0; /* Görünmez yap ama hala DOM'da kalsın */
    }
    
    #localProcessedCanvas {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        object-fit: cover;
    }
    
    #processedVideoCanvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        z-index: 1; /* Düşük z-index değeri */
        display: none; /* Varsayılan olarak gizli */
    }

    .pip-video {
        position: absolute;
    }

    .call-controls {
        position: absolute;
        bottom: 16px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 100;
        display: flex;
        gap: 8px;
    }

    .call-button {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        border: none;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .call-button:hover {
        background-color: rgba(0, 0, 0, 0.8);
    }

    .call-button.end-call {
        background-color: #dc3545;
    }

    .call-button.end-call:hover {
        background-color: #bb2d3b;
    }

    #connectionStatus {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
    }

    .message-container {
        height: 400px;
        overflow-y: auto;
        padding: 16px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .message {
        margin-bottom: 8px;
        padding: 8px 12px;
        border-radius: 16px;
        max-width: 80%;
    }

    .message.sent {
        background-color: #007bff;
        color: white;
        margin-left: auto;
    }

    .message.received {
        background-color: #e9ecef;
        color: #212529;
        margin-right: auto;
    }

    .message-system {
        text-align: center;
        color: #6c757d;
        margin: 8px auto;
        font-size: 12px;
        background-color: #f8f9fa;
        padding: 6px 12px;
        border-radius: 8px;
        max-width: 90%;
    }
    
    .message-error {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
        font-weight: 500;
    }
    
    /* Improve message list styling */
    #messagesList {
        display: flex;
        flex-direction: column;
        gap: 8px;
        padding: 12px;
    }
    
    .message {
        position: relative;
        word-break: break-word;
    }
    
    .message-outgoing {
        align-self: flex-end;
        background-color: #dcf8c6;
        border-radius: 18px 18px 0 18px;
        margin-left: 40px;
    }
    
    .message-incoming {
        align-self: flex-start;
        background-color: #ffffff;
        border-radius: 18px 18px 18px 0;
        margin-right: 40px;
        box-shadow: 0 1px 1px rgba(0,0,0,0.1);
    }
    
    .user-id {
        display: block;
        font-size: 12px;
        color: #65676b;
        margin-bottom: 2px;
    }
    
    .message-text {
        display: block;
    }
    
    /* API Error Popup Styles */
    .api-error-popup {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #f8d7da;
        color: #842029;
        padding: 10px 15px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 9999;
        display: none;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
    }
    
    .api-error-content {
        display: flex;
        align-items: center;
        font-size: 14px;
        font-weight: 500;
    }
    
    .show-popup {
        display: block;
        opacity: 1;
    }
    
    .hide-popup {
        opacity: 0;
    }
    
    /* Animation for the connection status */
    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .badge.bg-warning {
        animation: pulse 1.5s infinite;
    }
    
    /* Hızlı sonlandırma buton stilini iyileştirme */
    #quickEndCallButton {
        display: none;
        align-items: center;
        justify-content: center;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
        transition: all 0.2s ease;
        border: 2px solid white;
    }
    
    #quickEndCallButton:hover {
        transform: scale(1.1);
        background-color: #c82333;
    }
    
    #quickEndCallButton:active {
        transform: scale(0.95);
        background-color: #bd2130;
    }
    
    /* Görüşmeden ayrılma buton stilini iyileştirme */
    #leaveCallButton {
        display: none;
        align-items: center;
        justify-content: center;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
        transition: all 0.2s ease;
        border: 2px solid white;
    }
    
    #leaveCallButton:hover {
        transform: scale(1.1);
        background-color: #5a6268;
    }
    
    #leaveCallButton:active {
        transform: scale(0.95);
        background-color: #4e555b;
    }
</style> 